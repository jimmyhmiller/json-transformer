apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'


archivesBaseName = "json-transformer"
version = "0.1.0"
group = "io.github.jimmyhmiller"



configurations {
    deployerJars
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-http:2.2"
}

signing {
    sign configurations.archives
}

println ossrhUsername


 uploadArchives {
     repositories {
         mavenDeployer {
             beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
             configuration = configurations.deployerJars
             repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                 authentication(userName: ossrhUsername, password: ossrhPassword)
             }

             snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                 authentication(userName: ossrhUsername, password: ossrhPassword)
             }

             pom.project {
                 name 'JsonTransformer'
                 packaging 'jar'
                 description 'A library for transforming json in Java 8'
                 url 'http://github.com/jimmyhmiller/json-transformer'


                 licenses {
                     license {
                         name 'The MIT License (MIT)'
                         url 'https://opensource.org/licenses/MIT'
                     }
                 }

                 developers {
                     developer {
                         id 'jimmyhmiller'
                         name 'Jimmy Miller'
                         email 'jimmyhmiller@gmail.com'
                     }
                 }
             }
         }
     }
 }


repositories {
    mavenCentral()
}

configurations {
    markdownDoclet
}


test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    dependsOn 'cleanTest'
}


dependencies {
    compile 'org.glassfish:javax.json:1.0.4'
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    markdownDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1'
    testCompile 'junit:junit:4.12'
    testCompile 'com.pholser:junit-quickcheck-core:0.5-alpha-4'
    testCompile 'com.pholser:junit-quickcheck-generators:0.5-alpha-4'
}

javadoc.options {
    docletpath = configurations.markdownDoclet.files.asType(List)
    doclet = "ch.raffael.doclets.pegdown.PegdownDoclet"
    addStringOption("parse-timeout", "10")
}


